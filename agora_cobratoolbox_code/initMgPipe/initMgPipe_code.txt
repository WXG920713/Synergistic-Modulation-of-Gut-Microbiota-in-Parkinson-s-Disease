% --- Set up file paths and parameters ---
% abunFilePath: Path to the OTU (Operational Taxonomic Unit) table or a similar abundance input file.
%               In this case, it's 'path_to_otu_table/agora_input.txt'. [cite: 1]
%               This file likely contains information about the abundance of different microbial species.
abunFilePath = 'path_to_otu_table/agora_input.txt'; % [cite: 1]

% modPath: Path to the species pan-models. [cite: 1]
%          These models represent the metabolic capabilities of the microbial species.
modPath = 'path_to_species_panmodel'; % [cite: 1]

% dietFilePath: Path to the file containing diet constraints. [cite: 1]
%               This file defines the available nutrients or dietary inputs for the microbial community.
dietFilePath = 'path_to_diet_constraints_file'; % [cite: 1]

% computeProfiles: A boolean flag indicating whether to compute metabolic profiles.
%                  Setting it to 'true' means profiles will be computed. [cite: 1]
computeProfiles = true; % [cite: 1]

% numWorkers: Specifies the number of parallel workers (CPU cores/threads) to use for computation.
%             Set to 32 in this script. [cite: 1]
numWorkers = 32; % [cite: 1]

% --- Execute the metabolic modeling pipeline ---
% initMgPipe: This is the main function that runs the metabolic modeling pipeline. [cite: 2]
% It takes model paths, abundance data, and other parameters as input.
% It outputs various results related to the metabolic interactions and fluxes within the microbial community.
%
% Input arguments:
%   modPath:         Path to the species pan-models. [cite: 2]
%   abunFilePath:    Path to the abundance file. [cite: 2]
%   computeProfiles: Boolean flag to compute profiles. [cite: 2]
%   'dietFilePath':  Keyword argument specifying the diet file path. [cite: 2]
%   dietFilePath:    The actual path to the diet constraints file. [cite: 2]
%   'numWorkers':    Keyword argument specifying the number of workers. [cite: 2]
%   numWorkers:      The actual number of workers. [cite: 2]
%
% Output arguments:
%   init:                 Initialization results or status.
%   netSecretionFluxes:   Net secretion fluxes of metabolites by the community. [cite: 2]
%   netUptakeFluxes:      Net uptake fluxes of metabolites by the community. [cite: 2]
%   Y:                    Could represent yields or other model outputs.
%   modelStats:           Statistics related to the metabolic models. [cite: 2]
%   summary:              A summary of the results. [cite: 2]
%   statistics:           Detailed statistical outputs. [cite: 2]
[init, netSecretionFluxes, netUptakeFluxes, Y, modelStats, summary, statistics] = initMgPipe(modPath, abunFilePath, computeProfiles, 'dietFilePath', dietFilePath, 'numWorkers', numWorkers); % [cite: 2]

% --- Save pairwise interaction results to a CSV file ---
% csvFilePath: Defines the name and path for the output CSV file. [cite: 2]
%              Set to 'result.csv'. [cite: 2]
csvFilePath = 'result.csv'; % [cite: 2]

% cell2csv: A function used to write a cell array to a CSV file.
%           This line assumes 'pairwiseInteractions' is a cell array variable existing in the workspace,
%           likely generated by a previous part of the script or the initMgPipe function,
%           although it's not explicitly shown as an output of initMgPipe in the provided snippet.
%           If 'pairwiseInteractions' is not defined, this line will cause an error.
cell2csv(csvFilePath, pairwiseInteractions); % [cite: 2]